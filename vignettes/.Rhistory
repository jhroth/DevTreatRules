setwd("~/Dropbox/UW/Research/Dissertation/DevTreatRules/vignettes")
load("/home/jeremy/Dropbox/UW/Research/Dissertation/DevTreatRules/data/one.dataset.rda")
setwd("~/Dropbox/UW/Research/Dissertation/DevTreatRules/vignettes")
set.seed(123)
model.selection <- CompareRulesOnValidation(development.data=development.data,
validation.data=validation.data,
study.design.development="observational",
vec.approaches=vec.approaches,
vec.rule.methods=vec.rule.methods,
vec.propensity.methods=vec.propensity.methods,
name.outcome.development="no_relapse",
type.outcome.development="binary",
name.treatment.development="intervention",
names.influencing.treatment.development=c("prognosis", "clinic", "age"),
names.influencing.rule.development=c("age", paste0("gene_", 1:10)),
desirable.outcome.development=TRUE)
library(DevTreatRules)
CompareRulesOnValidation(
library(DevTreatRules)
head(example_df)
set.seed(123)
example.split <- SplitData(data=example_df, n.sets=3, split.proportions=c(0.5, 0.25, 0.25))
library(DevTreatRules)
head(example_df)
set.seed(123)
example.split <- SplitData(data=example_df, n.sets=3, split.proportions=c(0.5, 0.25, 0.25))
table(example.split$partition)
library(dplyr)
development.data <- example.split %>% filter(partition == "development")
validation.data <-  example.split %>% filter(partition == "validation")
evaluation.data <-  example.split %>% filter(partition == "evaluation")
model.selection <- CompareRulesOnValidation(development.data=development.data,
validation.data=validation.data,
study.design.development="observational",
vec.approaches=vec.approaches,
vec.rule.methods=vec.rule.methods,
vec.propensity.methods=vec.propensity.methods,
name.outcome.development="no_relapse",
type.outcome.development="binary",
name.treatment.development="intervention",
names.influencing.treatment.development=c("prognosis", "clinic", "age"),
names.influencing.rule.development=c("age", paste0("gene_", 1:10)),
desirable.outcome.development=TRUE)
names.influencing.treatment=c("prognosis", "clinic", "age")
vec.approaches=c("split-regression", "OWL.framework", "direct.interactions")
vec.rule.methods=c("glm.regression", "lasso", "ridge")
vec.propensity.methods=c("logistic.regression", "lasso", "ridge")
set.seed(123)
model.selection <- CompareRulesOnValidation(development.data=development.data,
validation.data=validation.data,
study.design.development="observational",
vec.approaches=vec.approaches,
vec.rule.methods=vec.rule.methods,
vec.propensity.methods=vec.propensity.methods,
name.outcome.development="no_relapse",
type.outcome.development="binary",
name.treatment.development="intervention",
names.influencing.treatment.development=c("prognosis", "clinic", "age"),
names.influencing.rule.development=c("age", paste0("gene_", 1:10)),
desirable.outcome.development=TRUE)
vec.approaches=c("split.regression", "OWL.framework", "direct.interactions")
vec.rule.methods=c("glm.regression", "lasso", "ridge")
vec.propensity.methods=c("logistic.regression", "lasso", "ridge")
set.seed(123)
model.selection <- CompareRulesOnValidation(development.data=development.data,
validation.data=validation.data,
study.design.development="observational",
vec.approaches=vec.approaches,
vec.rule.methods=vec.rule.methods,
vec.propensity.methods=vec.propensity.methods,
name.outcome.development="no_relapse",
type.outcome.development="binary",
name.treatment.development="intervention",
names.influencing.treatment.development=c("prognosis", "clinic", "age"),
names.influencing.rule.development=c("age", paste0("gene_", 1:10)),
desirable.outcome.development=TRUE)
```
library(glmnet)
library(DevTreatRules)
library(glmnet)
model.selection$list.summaries[["split.regression"]]
model.selection$list.summaries[["OWL.framework"]]
model.selection$list.summaries[["direct.interactions"]]
model.selection$list.summaries[["OWL.framework"]]
setwd("~/Dropbox/UW/Research/Dissertation/DevTreatRules/vignettes")
setwd("~/Dropbox/UW/Research/Dissertation/DevTreatRules/vignettes")
rule.1 <- model.selection$list.rules$split.regression[["propensity_logistic.regression_rule_glm.regression"]]
set.seed(123)
example.split <- SplitData(data=example_df, n.sets=3, split.proportions=c(0.5, 0.25, 0.25))
table(example.split$partition)
library(DevTreatRules)
library(glmnet)
head(example_df)
set.seed(123)
example.split <- SplitData(data=example_df, n.sets=3, split.proportions=c(0.5, 0.25, 0.25))
table(example.split$partition)
development.data <- example.split %>% filter(partition == "development")
validation.data <-  example.split %>% filter(partition == "validation")
evaluation.data <-  example.split %>% filter(partition == "evaluation")
names.influencing.treatment=c("prognosis", "clinic", "age")
names.influencing.rule=c("age", paste0("gene_", 1:10))
set.seed(123)
model.selection <- CompareRulesOnValidation(development.data=development.data,
validation.data=validation.data,
study.design.development="observational",
vec.approaches=c("split.regression", "OWL.framework", "direct.interactions"),
vec.rule.methods=c("glm.regression", "lasso", "ridge"),
vec.propensity.methods="logistic.regression",
name.outcome.development="no_relapse",
type.outcome.development="binary",
name.treatment.development="intervention",
names.influencing.treatment.development=c("prognosis", "clinic", "age"),
names.influencing.rule.development=c("age", paste0("gene_", 1:10)),
desirable.outcome.development=TRUE)
library(dplyr)
development.data <- example.split %>% filter(partition == "development")
validation.data <-  example.split %>% filter(partition == "validation")
evaluation.data <-  example.split %>% filter(partition == "evaluation")
set.seed(123)
model.selection <- CompareRulesOnValidation(development.data=development.data,
validation.data=validation.data,
study.design.development="observational",
vec.approaches=c("split.regression", "OWL.framework", "direct.interactions"),
vec.rule.methods=c("glm.regression", "lasso", "ridge"),
vec.propensity.methods="logistic.regression",
name.outcome.development="no_relapse",
type.outcome.development="binary",
name.treatment.development="intervention",
names.influencing.treatment.development=c("prognosis", "clinic", "age"),
names.influencing.rule.development=c("age", paste0("gene_", 1:10)),
desirable.outcome.development=TRUE)
warnings()
rule.1 <- model.selection$list.rules$split.regression[["propensity_logistic.regression_rule_glm.regression"]]
coef(rule.1)
names(rule.1)
rule.1$rule.method
rule.1$prediction.approach
rule.1$rule.object.control
coef(rule.1$rule.object.control)
rule.1 <- model.selection$list.rules$split.regression[["propensity_logistic.regression_rule_lasso"]]
coef(rule.1$rule.object.control)
coef(rule.1$treat)
coef(rule.1$rule.object.control)
coef(rule.1$rule.object.treat)
coef(rule.1$rule.object.control)
coef(rule.1$rule.object.treat)
coef(rule.1$rule.object.control)
coef(rule.1$rule.object.treat)
coef(rule.1$rule.object.control)
coef(rule.1$rule.object.treat)
names(model.selection$list.rules$split.regression)
coef(rule.split$rule.object.control)
# Chunk 1: setup
knitr::opts_chunk$set(
collapse = TRUE,
comment = "##"
)
def.chunk.hook  <- knitr::knit_hooks$get("chunk")
knitr::knit_hooks$set(chunk = function(x, options) {
x <- def.chunk.hook(x, options)
ifelse(options$size != "normalsize", paste0("\\", options$size,"\n\n", x, "\n\n \\normalsize"), x)
})
library(DevTreatRules)
library(glmnet)
# Chunk 2
head(example_df)
# Chunk 3: split_data
set.seed(123)
example.split <- SplitData(data=example_df, n.sets=3, split.proportions=c(0.5, 0.25, 0.25))
table(example.split$partition)
# Chunk 4: make_subsets
library(dplyr)
development.data <- example.split %>% filter(partition == "development")
validation.data <-  example.split %>% filter(partition == "validation")
evaluation.data <-  example.split %>% filter(partition == "evaluation")
# Chunk 5
names.influencing.treatment=c("prognosis", "clinic", "age")
# Chunk 6
names.influencing.rule=c("age", paste0("gene_", 1:10))
# Chunk 7: build_one_rule
one.rule <- BuildRule(data=development.data,
study.design="observational",
prediction.approach="split.regression",
name.outcome="no_relapse",
type.outcome="binary",
desirable.outcome=TRUE,
name.treatment="intervention",
names.influencing.treatment=c("prognosis", "clinic", "age"),
names.influencing.rule=c("age", paste0("gene_", 1:10)),
propensity.method="logistic.regression",
rule.method="glm.regression")
# Chunk 8
vec.approaches=c("split.regression", "OWL.framework", "direct.interactions")
vec.rule.methods=c("glm.regression", "lasso", "ridge")
# Chunk 9
vec.propensity.methods="logistic.regression"
# Chunk 10: model_selection_on_validation
set.seed(123)
model.selection <- CompareRulesOnValidation(development.data=development.data,
validation.data=validation.data,
study.design.development="observational",
vec.approaches=c("split.regression", "OWL.framework", "direct.interactions"),
vec.rule.methods=c("glm.regression", "lasso", "ridge"),
vec.propensity.methods="logistic.regression",
name.outcome.development="no_relapse",
type.outcome.development="binary",
name.treatment.development="intervention",
names.influencing.treatment.development=c("prognosis", "clinic", "age"),
names.influencing.rule.development=c("age", paste0("gene_", 1:10)),
desirable.outcome.development=TRUE)
# Chunk 11: look_at_validation_split
model.selection$list.summaries[["split.regression"]]
# Chunk 12: look_at_validation_OWL
model.selection$list.summaries[["OWL.framework"]]
# Chunk 13: look_at_validation_DI
model.selection$list.summaries[["direct.interactions"]]
# Chunk 14: rule_split
rule.split <- model.selection$list.rules$split.regression[["propensity_logistic.regression_rule_glm.regression"]]
coef(rule.split$rule.object.control)
coef(rule.split$rule.object.treat)
# Chunk 15: rule_OWL
rule.OWL <- model.selection$list.rules$OWL.framework[["propensity_logistic.regression_rule_glm.regression"]]
coef(rule.OWL$rule.object.control)
coef(rule.OWL$rule.object.treat)
# Chunk 16: evaluate_selected_treatment_rules_on_test_set
set.seed(123)
split.eval <- EvaluateRule(data=evaluation.data,                           BuildRule.object=model.selection$list.rules$split.regression[["propensity_logistic.regression_rule_glm.regression"]],
study.design="observational",
name.outcome="no_relapse",
type.outcome="binary",
desirable.outcome=TRUE,
name.treatment="intervention",
names.influencing.treatment=c("prognosis", "clinic", "age"),
names.influencing.rule=c("age", paste0("gene_", 1:10)),
bootstrap.CI=FALSE,
bootstrap.CI.replications=1000)
set.seed(123)
OWL.framework.eval <- EvaluateRule(data=evaluation.data,
BuildRule.object=model.selection$list.rules$OWL.framework[["propensity_logistic.regression_rule_glm.regression"]],
study.design="observational",
name.outcome="no_relapse",
type.outcome="binary",
desirable.outcome=TRUE,
name.treatment="intervention",
names.influencing.treatment=c("prognosis", "clinic", "age"),
names.influencing.rule=c("age", paste0("gene_", 1:10)),
bootstrap.CI=FALSE,
bootstrap.CI.replications=1000)
# Chunk 17
split.eval[c("n.test.positives", "n.test.negatives", "ATE.test.positives", "ATE.test.negatives", "ABR")]
OWL.framework.eval[c("n.test.positives", "n.test.negatives", "ATE.test.positives", "ATE.test.negatives", "ABR")]
# Chunk 18
bootstrap.CI=TRUE
booststrap.CI.replications=1000
rule.OWL
names(rule.OWL)
coef(rule.OWL$rule.object)
BuildRule
getwd()
setwd("../../
"
)
devtools::document()
library(BioPET)
